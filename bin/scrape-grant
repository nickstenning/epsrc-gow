#!/usr/bin/env ruby

# scrape-grant
#
# This file takes a line-delimited list of EPSRC grant references on STDIN,
# and emits YAML on STDOUT, containing data scraped from the Grants on the Web
# grant detail pages at http://gow.epsrc.ac.uk/ViewGrant.aspx?GrantRef=<GrantRef>
#
# Example usage:
#
#     sqlite3 grants.db 'select id from grants limit 100' | ./bin/scrape-grant > 100_grants.yaml
#

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'rubygems'

require 'yaml'
require 'mechanize'
require 'hpricot'

class GrantParseException < RuntimeError; end

MAPPING = {
  "EPSRC Reference:" => proc do |g, r|
    grant_ref =r.at('#lblGrantReference').innerText
    if grant_ref != g['id']
      raise GrantParseException, "Grant claims to be #{g['id']} but has #{grant_ref} in scraped HTML!"
    end
  end,

  "Title:" => proc do |g, r|
    g['title'] = r.at('span#lblTitle strong').innerText
  end,

  "Principal Investigator:" => proc do |g, r|
    pi_el = r.at('a#hlPrincipalInvestigator + a')
    g['principal_investigator'] ||= {}
    g['principal_investigator']['id'] = get_fkey(pi_el, 'Person')
    g['principal_investigator']['name'] = pi_el.innerText
  end,

  "Other Investigators:" => proc do |g, r|
    extract_multiple_fkeys(g, r, 'Person', 'other_investigators')
  end,

  "Researcher Co-investigators:" => proc do |g, r|
    extract_multiple_fkeys(g, r, 'Person', 'co_investigators')
  end,

  "Project Partners:" => proc do |g, r|
    extract_multiple_fkeys(g, r, 'Organisation', 'project_partners')
  end,

  "Department:" => proc do |g, r|
    g['department'] ||= {}
    g['department']['name'] = r.at('#lblDepartment').innerText
  end,

  "Organisation:" => proc do |g, r|
    g['organisation'] ||= {}
    g['organisation']['name'] = r.at('#lblOrganisation').innerText
  end,

  "Scheme:" => proc do |g, r|
    g['scheme'] = r.at('#lblAwardType').innerText
  end,

  "Starts:" => proc do |g, r|
    g['start_date'] = r.at('#lblStarts').innerText
    g['end_date'] = r.at('#lblEnds').innerText
    g['value_string'] = r.at('#lblValue')['title']
    g['value'] = g['value_string'].gsub(/[Â£,]/, '').to_f
  end,

  "EPSRC Research Topic Classifications:" => proc do |g, r|
    r.search('table td').each do |x|
      topic = x.innerText.strip.split(': ')
      (g['research_topics'] ||= []) << topic if topic.any?
    end
  end,

  "EPSRC Industrial Sector Classifications:" => proc do |g, r|
    r.search('table td').each do |x|
      sector = x.innerText.strip
      (g['sectors'] ||= []) << sector if sector.any?
    end
  end,

  # NB this leading space is intentional.
  " Related Grants:" => proc do |g, r|
    tab = r.at('table')
    if tab
      r.search('td a') do |x|
        grant = x.innerText.strip
        (g['related_grants'] ||= []) << grant unless grant.empty?
      end
    end
  end,

  "Panel History:" => proc do |g, r|
    ph = r.at('td.bordered').innerHTML.strip
    if ph != '&nbsp;'
      g['panel_history'] = ph
    end
  end,

  "Further Information:" => proc do |g, r|
    fi = r.at('td.DetailValueAlt').innerHTML.strip
    if fi != '&nbsp;'
      g['further_information'] = fi
    end
  end,

  "Organisation Website:" => proc do |g, r|
    el = r.at('a')
    if el and !(website = el['href'].strip).empty?
      g['organisation'] ||= {}
      g['organisation']['website'] = website
    end
  end

}

def find_fkey_elems(elem, type)
  elem.search("a[@href*='?#{type}Id=']")
end

def get_fkey(elem, type)
  elem['href'].match(/#{type}Id=(\-?\d+)/)[1].to_i
end

def extract_multiple_fkeys(g, elem, type, key)
  find_fkey_elems(elem, type).each do |el|
    g[key] ||= []
    r = {}
    r['id'] = get_fkey(el, type)
    r['name'] = el.innerText
    g[key] << r
  end
end

def extract(g)
  h = Hpricot(g['html'])
  g.delete('html')

  h.search("tr").each do |row|
    key = row.search("td")[0].innerText

    if m = MAPPING[key]
      m.call(g, row)
    end
  end

  if abs_el = h.search('#lblAbstract')
    abs = abs_el.innerHTML.strip
    if !abs.empty? and abs != 'No summary is available for this grant.'
      g['abstract'] = abs
    end
  end

  if fr_el = h.search('#lblFinalReportSummary')
    fr = fr_el.innerHTML.strip
    if !fr.empty? and fr != 'No final report summary is available for this grant.'
      g['final_report_summary'] = fr
    end
  end

  g
end

if __FILE__ == $0

  a = Mechanize.new

  begin
    while id = STDIN.readline.chomp
      $stderr.puts "Scraping grant #{id}"

      page = a.get("http://gow.epsrc.ac.uk/ViewGrant.aspx?GrantRef=#{id}")

      h = Hpricot(page.body)

      grant = {}

      grant['id'] = id
      grant['html'] = h.search('#tblFound').innerHTML

      begin
        y extract(grant)
      rescue GrantParseException => e
        $stderr.puts e
      end

      y grant
    end
  rescue EOFError
  end
end


